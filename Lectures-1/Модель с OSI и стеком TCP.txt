Чуть ближе познакомимся с моделью с OSI и стеком TCP/IP. Как я и говорил ранее компьютерные сети это довольно
масштабная задача, особенно если мы строим такую сеть как “Интернет”. Как и любую другую большую задачу, мы разбиваем
её на несколько маленьких, независимых друг от друга задач, а потом соединяем их какой-либо логикой. Тоже самое было
сделано и с компьютерными сетями, правила взаимодействия узлов в сетях были разбиты на уровни. Подхода построений
таких уровней было два.
Первый подход - больше теоретический, его концепцию начала разрабатывать в 1982 году Международная Организация по
Стандартизации ISO (International Standardization Organization) и называлась она OSI (Open System Interconnection -
модель взаимодействия открытых систем), эта модель была больше теоретическая и большая часть её протоколов так и не
вышла в свет или не прижилась в сетях. Модель содержала в себе 7 уровней. Параллельно с этим в 70-х годах развивался
стек более простых протоколов TCP/IP, который был популярен в молодой тогда сети Интернет.
На первом уровне OSI (и первой половине Канального уровня TCP/IP) решалась задача по стандартизации передачи данных на
физических линиях связи, то есть задача передачи битов, ноликов и единичек, задача по их кодированию. Ведь если
производитель А сделает устройство на котором будет приниматься сигнал по двум проводам с напряжением 5 вольт а
производитель Б начнёт производить сетевое оборудование на котором будет приниматься сигнал по четырем проводам с
разницей напряжения 3, 6 и 12 вольт, то к сожалению они не смогут друг с другом работать. Поэтому надо договориться о
уровнях напряжений, а если сигнал передается по оптоволокну, то необходимо договориться о длине волны, сечении
оптоволокна и прочих физических параметрах. На этом уровне работают законы физики, собственно поэтому уровень
называется физическим.
На втором уровне модели OSI у нас уже формируется понятие пакета данных как некоторого куска данных, появляется логика,
мы можем этот пакет абстрактно изобразить. Пакет разделяется на две части: сами данные и метаданные - данные о данных.
Эти метаданные называются заголовком пакета, или header. Зачем он нужен? Если у нас участников сети становятся более
чем 2, то как правило, у нас уже появляется некое сетевое оборудование, которое занимается пересылкой данных. И узлам
сети необходимо различать пакеты друг от друга, от кого кому они идут, какие данные эти пакеты передают, и так далее,
вот собственно эта информация и описана в заголовке пакета.
Далее нам нужен еще один уровень. Зачем? А представьте, что мы в нашу небольшую сеть подключаем компьютер Маши, ей
надо передать информацию Пете, но она не знает кто в сети Петя. Что она делает? Помните? Она рассылает броадкаст. Если все устройства в
мире будут работать в одной сети, и слать друг другу броадкасты, то
такая сеть будет заполнена только одним таким броадкастом. При этом мы теряем в гибкости и в масштабируемости такой
сети, а еще и в безопасности, ведь весь мир будет знать, что Маша ищет Петю. Поэтому на сцену выходит такое понятие как
отдельная сеть, в которой ограничен броадкаст трафик. Именно множество таких независимых сетей, соединенных между собой
и представляет из себя интернет. Ведь если мы посмотрим на само слово Интернет, то увидим что оно состоит из двух слов
- “Интер” и “Нет”. Где “Интер” можно перевести как “между”, а “Нет”, как “сеть”, получается - “межсеть”, а Internet
Protocol - “протокол межсетевого взаимодействия”.
Именно эти три уровня позволяют осуществлять доставку трафика от любого хоста к любому другому хосту в сетях, если все
настроено верно. Но на этом еще не всё. Как быть в следующей ситуации: пакет данных прилетает на компьютер, компьютер
смотрит в заголовок этого пакета и понимает что он ему, комп отрезает заголовок у пакета, а дальше идут нолики и
единички, биты Payload’а. Как быть с этими битами? Какому приложению передать их дальше? Может быть это для
веб-браузера? Может быть это для мессенджера? может быть это данные протокола ssh? Который служит для администрирования
удалёнными серверами? Если процессор будет заниматься перебором и угадыванием какому приложению передать дальше эти
нолики и единички, это будет совсем не эффективно. Данные на сетевой интерфейс могут прилетать со скоростью несколько
десятков тысяч пакетов в секунду. Тут нас и выручает L4 - транспортный уровень, который как раз решает эту проблему и
отвечает за доставку трафика от конкретного приложения до конкретному приложению в сети.
Далее у нас начинаются различия в моделях OSI и TCP/IP, в OSI представлены такие уровни как сеансовый и представления.
В теории сеансовый уровень должен был отвечать за поддержание сеанса связи между различными приложениям, чтобы
взаимодействие устанавливалось на длительное время. Уровень представления должен был отвечать за представление
форматов данных, которые передаются по сети, то есть определять должен ли это быть ASCII код или UTF для текста, или
JPEG или PNG для изображений. На практике пятый и шестой уровни оказались не нужны. Предыдущих 4 уровней хватает для
того, чтобы трафик дошел от приложения к приложению, а как будут общаться между собой эти приложения договариваются
уже разработчики этих приложений. Для этого было достаточно одного уровня - L7, он же прикладной уровень или
application layer. Исторически сложилось так, что TCP/IP стал практически повсеместно используемым протоколом. Но для
обозначения уровней в технических характеристиках устройств, в литературе, при общении, используют семиуровневую
модель. В итоге получаем, что:
    - L1 -это физика,
    - L2 - канальный уровень,
    - L3 сетевой,
    - L4 транспортный,
    - и L7 прикладной.
Важно понять, что на каждом из этих уровней есть свой заголовок внутри пакета и эти заголовки следуют друг за другом.
Это называется инкапсуляция. Сетевое устройство которое пересылает пакеты, принимает решение куда дальше направить
пакет, на основе заголовка определённого уровня.
На каждом уровне пакет носит своё название. На L2 - это Фрейм, на L3 - это пакет, на L4 - это сегмент. Но такие
названия больше используются в официальной литературе, на практике все обычно просто говорят пакет, и уже из контекста
разговора понимаем о заголовке какого уровня идёт речь.
Также нужно учитывать, что эти уровни независимы друг от друга. Что имеется в виду? Например, физика у нас может быть
как оптикой так и медными проводами, передаваться сигналы могут с помощью одного метода кодирования или другого, но это
не влияет на то, что будет у нас на уровне L2, там формат заголовка пакета не поменяется от способа передачи бит на L1.
Точно также выбор протокола L2 не влияет на заголовок L3 уровня. У нас пакеты могут идти из одной IP сети в другую, а
под собой использовать канал, построенный например по протоколу Ethernet или по X.25 (это устаревший протокол передачи данных канального уровня в основном через
телефонные сети).
