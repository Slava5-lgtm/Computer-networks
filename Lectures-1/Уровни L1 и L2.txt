Теперь давайте перейдём к разбору уровня L1. Данный уровень, как и говорилось ранее, предназначен для
определения физических характеристик и величин, на которых должны работать устройства, чтобы понимать друг
друга. Самые распространненые протоколы на данном уровни входят в стандарт под номером 802.3 - Ethernet.
Данный Стандарт был описан в IEEE - в институте инженеров по электронике электротехнике. Этот стандарт
сразу описывает работу двух уровней L1 и L2. Исторически самый первый стандарт описывал работу сетевых
устройств, соединенных коаксиальным кабелем.
Вы могли его встречать при подключении телевизора, раньше он также использовался и для передачи данных. В
таком кабеле есть одна медная жила, которая из себя представляла конкурентную среду передачи данных.
Максимальная скорость передачи данных по такому кабелю была 10Мб/с в секунду, и это в идеальных условиях.
Был период, когда сети строились на коаксиальных кабелях, которые соединялись с помощью хаба - простого
устройства повторяющего сигнал на все свои порты, что создавало возможность для наложения сигналов и
возникновения коллизий. При этом сигнал, который шел от одного компьютера к другому доходил до всех других
участников сети и все знали о чем эти два компьютера общаются. Обратите внимание, что если мы соединим
через хаб 5 компьютеров, то это не будет полносвязной топологией между ними, т.к. при разрыве линка
компьютер теряет связь сразу со всеми. Втыкание в хаб можно сравнить с топологией общая шина (которую мы
рассмотрели ранее), по сути в хабе создается общая конкурентная среда, общение в которой возможно только
по half-duplex - домен коллизий.

                                        Витая пара

В отличии от коксольной, может оргонизовать цифровую передачу данных, замыкая/размыкая цепь.
Скорость до 100 Мб/с, если использовать 8 жил - 1 Гб/с, специальные сетевые карты - до 10 Гб/с

Но стояла проблема коллизий и ограничений по скорости, поэтому развитием этого коаксиального кабеля стал
многожильный кабель, который называется витая пара. Витая пара состоит из скрученных между собой попарно
проводников. По каждой паре передается сигнал в одну сторону. Благодаря тому, что проводников в паре два,
мы можем замыкая/размыкая цепь, организовывать цифровую передачу данных, в отличии от коаксиала. Замыкая/
размыкает цепь на каждой паре, мы можем передавать единички и нолики. Передаются они конечно же не прям в
таком чистом виде, на оборудовании используются свои методы кодирования, которые позволяют передавать эти
биты более помехозащищенным способом.
В сетях построенных на основе витой пары с двумя парами, раньше были такие, можно было уже реализовать
протокол Fast Ethernet, в котором скорость передачи данных могла достигать уже 100 Мб/с с Full-Duplex’ом.
Обратите внимание, что тут одна пара служит для приёма а другая для передачи, что дает нам возможность
избегать коллизий.
Электроника развивалась и в какое-то время мы научились создавать чипы, которые могли одновременно
передавать и принимать данные по всем 8 жилам витой пары без коллизий. Это позволило достигать скорости до
1Гб/с, и на смену Fast Ethernet, пришёл Gigabit Ethernet. На сегодняшний день есть стандарт и существуют
сетевые карты, которые уже позволяют разгоняться до 10 Гб/с. Реализуется это благодаря специальной витой
паре, в которой каждая пара идет отдельно друг от друга в защитной металлической оплетке.

                                        Оптика

Если необходимо передать сигнал на длиное расстояние, до 50 км.
Вместо электроного используют фотоны, Которые двигаються по тонкому стеклянлму проводу.

Стоит отметить что длина сегмента на витой паре в стандартах Ethernet ограничена ста метрами из-за
затухания сигнала в медном проводнике. Когда необходимо передать сигнал на более длинное расстояние,
необходимо использовать оптическую линию связи. В такой среде вместо электронов мы используем фотоны,
которые двигаясь по тонкому стеклянному проводу, встречают гораздо меньше сопротивления, чем электроны в
меди. В оптике также существуют многообразие стандартов и оборудования, которыемеют различныеют
характеристики.
        Например:
            - какой источник света используется? Светодиод или мощный лазер.
            - по двум жилам передается/принимается информация, или по одной?
            - свет какой длины волны используется?
            - какое сечение оптоволокна?
Такой подход позволяет строить как небольшие корпоративные сети, так и глубоководные оптические линии
связи и передавать сигналы на расстояние 50 км.

                                        Формат Ethernet фрейма

В часестве адресации устройств придумади МАС (media access control) адрес.
МАС адрес - унивирсальное 6-ти батовое число, которое принято записывать в НЕХ виде, например:
00-11-95-1С-D8-02.

После того, как мы научились передавать сигналы от от узла к узлу, давайте разберёмся с тем вопросом, с
той проблемой, как вообще узел может отличить ему эти электроны летят, или не ему? К сожалению на электрон
мы не можем повесить ярлык и написать, что этот электрон должен лететь от Маши к Пете. Но зато, мы можем
объединить пачку электронов, и в этой пачке часть отвести для того, чтобы закодировать информацию о том,
от кого и кому летят эти электроны. Такая информация называется метаданными - данные о данных. Таким
образом мы вносим человеческую логику в законы физики, и у нас появляется канальный уровень L2.
Метаданные еще называются хедером или заголовком пакета.
Всё тот же стандарт Ethernet описывает какой должен быть заголовок на уровне L2. Считывая эти заголовки,
сетевые устройства принимают решение куда дальше направлять пакет и как обрабатывать его.
Давайте рассмотрим структуру L2 заголовка, она довольно-таки простая. Первые 6 байт отведены под
Destination адрес, то есть адрес кому этот пакет предназначен, вторые 6 байт выделены под Source адрес, то
есть адрес узла, который отправил этот пакет, эти адреса называются MAC адресами, они в основном
назначаются на сетевые интерфейсы оборудования, серверов, узлов сети.

                                        MAC-address

МАС-адрес состоит из двух частей, первая распределяеться между производителям оборудования, а вторая
распредиляеться самим производителем.
Ефким оброзом по МАС-адресу можно пнять фирму производителя оборудования (если адрес не был программно
изменен).
00-11-95-1С-D8-02       00-11-95 - производитель

У каждой сетевой карты на узле в сети должен быть свой уникальный MAC адрес. Каким образом это достигается?
Дело в том, что производитель сетевого оборудования и сетевых карт не может сам рандомно назначать МАС
адреса на них, он должен выкупить первые 3 байта всё в том же институте IEEE. Институт за деньги выделяет
такой блок и производитель по очереди назначает на устройства адреса из этого блока, пока не исчерпает его.
Как только у него заканчиваются адреса в этом блоке, он идет покупать следующий блок. Таким образом
достигается, что не должно существовать 2 устройств с одинаковым МАС адресом. Но я отмечу что это в теории,
на практике МАС адрес на сетевой карте можно поменять вручную, но не нужно этого делать, без лишней
необходимости, чтобы не сломать работу сети.
Итак когда у нас устройство А хочет послать пакет устройству Б, он заполняет все данные в пакете, пакет с
незаполненными полями не может быть послан сетевым интерфейсом. Запомните это правило. Пока вынесем за
скобки то, как устройство узнаёт Destination MAC адрес, просто знает и всё. Source MAC адрес, то есть МАС
адрес своей сетевой карты, он сам знает.
Далее идет поле type, которое описывает какой протокол следует у нас дальше. Зачем он нужен? Предположим,
что этого поля не было бы. Тогда, принимающая сторона, как только получает такой пакет и понимает от кого
он отправлен, понимает что он отправлен ему, отрезает заголовок L2. А дальше идут нолики и единички - какие
-то данные. И что делать дальше с этими данными, какому процессу передать эти нолики и единички? На
обработку какого протокола? Может быть ipv4? Может быть это ipv6? Может быть это протокол ARP? Если
процессор на сетевой карте начнет тратить время на то, чтобы угадать как дальше обрабатывать пакет (а я
уточню, что таких пакетов может прилетать десятки тысяч в секунду), то это будет совсем не эффективно.
Поэтому отправитель должен заполнить поле type для того, чтобы принимающей стране было проще и быстрее
пакет обработать. Запомним этот приём, так как указание инкапсулированного протокола будет сопровождать нас
на каждом уровне.
Дальше идёт payload или полезные данные, которые несут в себе информацию для следующего уровня. Нам также
важно понять, пострадали ли данные например от помех, пока пакет летел по каналу связи. Для этого в конце
у нас есть контрольная сумма, checksum. Чтобы понять, как этот механизм работает, представим что это просто
побитовая сумма, и не четырех байтная, а четырех битовая для всего нашего пакета. Предположим что в пакете
идут следующие данные 0110 1101 1010 1001. Нарежем их по 4 бита, и просто сложим в столбик побитно:
0111
1101
1010
1001
—----
1001

Это значение и будет нашей упрощенной контрольной суммой. Отправитель обязан вписать её в последние поле.
Если такой пакет подвергнется помехам, и где-то поменяется 1 бит. Например здесь 0110 1001 1010 1001, то
контрольная сумма которую посчитает получатель при приеме такого пакета не совпадёт с той, которую отправил
отправитель. И данный пакет должен быть уничтожен, как искажённый. Это простой принцип описывающий
механизм контрольной суммы. Но теперь усложним немного этот принцип. Допустим, что у нас также подвергся
изменениям второй бит в третьем слагаемом 0110 1001 1110 1001. Тогда получается, что у нас контрольные
суммы совпадут, хотя пакет по факту будет искаженным. Дабы такого избегать, вместо просто обычной побитовой
суммы, используются более сложные математические функции, и вместо 4 бит берутся более длинные куски по 4
байта.

                                    Hub vs Switche

Hub физически повторяет сигнал на все порты одновременно.

Switch умеет передовать сигналы точечно получателю, при этом он выстраивает пакеты в очередь (проводит
буферацию).


Сформировать наши пакеты с заголовком L2 - это половина дела. Если мы будем посылать такие пакеты на самое
простое устройство - на хаб (который, напомню, просто повторяет сигнал на все порты), то у нас будет
оставаться возможность для возникновения коллизий. При коллизиях сеть не будет эффективно работать. Когда
пакетов будет много и участников сети тоже будет много, то коллизии будет возникать все чаще и чаще.
Поэтому нам нужно придумать устройство, которое умеет считывать этот заголовок L2 и принимать решение куда,
на какой порт, отправить этот пакет, а не плодить его глупо во все порты. Такое устройство называется
свитч, он же коммутатор. Его принципы работы мы и будем рассматривать на следующем уроке.
Подведем итог. Сегодня мы познакомились с основной терминологией в компьютерных сетях, которая пригодится
нам в дальнейшем. Познакомились с моделью OSI. И если даже она пока у вас вызывает вопросы, то ничего
страшного, к концу этого курса вы поймёте что она из себя представляет целиком и у вас сформируется
картинка в голове^ для чего она нужна. Также мы вкратце познакомились с уровнем L1, на котором реализован
стандарт Ethernet, который буквально говорит вендорам, как производить сетевые карты Ethernet, сетевые
стройства, работающие по протоколу Ethernet, какими физическими характеристиками они должны обладать и
прочее. И еще начали знакомиться с уровнем L2, рассмотрев структуру заголовка пакета.

